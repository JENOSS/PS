import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    public static void main(String[] args) {
        int[][] edge = {{3,6},{4,3},{3,2},{1,3},{1,2},{2,4},{5,2}};
        System.out.println(solution(6,edge));
    }

    public static int solution(int n, int[][] edge) {

        ArrayList<Integer>[] adjList = new ArrayList[n+1];
        boolean[] checked = new boolean[n+1];
        int[] weight = new int[n+1];

        for(int i = 0 ; i <= n; i++){
            adjList[i] = new ArrayList<>();
        }

        for(int i = 0 ; i < edge.length; i++){
            int start = edge[i][0];
            int end = edge[i][1];

            adjList[start].add(end);
            adjList[end].add(start);
        }

        return bfs(adjList,checked,weight);
    }

    public static int bfs(ArrayList<Integer>[] adjList, boolean[] checked, int[] weight){
        Queue<Integer> q = new LinkedList<>();
        HashMap<Integer,Integer> hm = new HashMap<>();

        q.offer(1);
        checked[1] = true;
        weight[1] = 0;
        hm.put(0,1);

        while(!q.isEmpty()){
            int currentNode = q.poll();
            int currentWeight = weight[currentNode];

            for(int nextNode : adjList[currentNode]){
                if(!checked[nextNode]){
                    checked[nextNode] = true;
                    weight[nextNode] = currentWeight+1;
                    hm.put(currentWeight+1 , hm.get(currentWeight+1) != null ? hm.get(currentWeight+1)+1 : 1);
                    q.offer(nextNode);
                }
            }
        }

        int maxWeight = 0;
        for(int v : hm.keySet()){
            if(maxWeight < v){
                maxWeight = v;
            }
        }

        return hm.get(maxWeight);
    }
}
