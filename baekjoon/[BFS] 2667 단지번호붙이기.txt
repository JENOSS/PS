import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int complex = 0;
    static ArrayList<Integer> answerList = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        // n : 단지 수
        int n = Integer.parseInt(in.readLine());
        int[][] map = new int[n+2][n+2];
        int[][] checkedMap = new int[n+2][n+2];

        for(int i = 0 ; i < n; i++){
            String s = in.readLine();
            for(int j = 0 ; j < s.length() ; j++){
                map[i+1][j+1] = Character.getNumericValue(s.charAt(j));
            }
        }

        for(int i = 1 ; i <= n; i++){
            for(int j = 1 ; j <= n ; j++){
                if(map[i][j] == 1 && checkedMap[i][j] == 0){
                    complex++;
                    answerList.add(bfs(map,checkedMap,i,j));
                }
            }
        }

        System.out.println(complex);
        Collections.sort(answerList);

        for(int i : answerList)
            System.out.println(i);
    }

    public static int bfs(int[][] map, int[][] checkedMap, int startI, int startJ){
        int count = 1;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{startI, startJ});
        checkedMap[startI][startJ] = 1;

        while(!q.isEmpty()){
            int[] idx = q.poll();

            if(map[idx[0]][idx[1]-1] == 1 && checkedMap[idx[0]][idx[1]-1] == 0){ //left
                q.offer(new int[]{ idx[0] , idx[1]-1});
                checkedMap[idx[0]][idx[1]-1] = 1;
                count++;
            }

            if(map[idx[0]][idx[1]+1] == 1 && checkedMap[idx[0]][idx[1]+1] == 0){ //right
                q.offer(new int[]{ idx[0] , idx[1]+1});
                checkedMap[idx[0]][idx[1]+1] = 1;
                count++;
            }

            if(map[idx[0]-1][idx[1]] == 1 && checkedMap[idx[0]-1][idx[1]] == 0){ //up
                q.offer(new int[]{ idx[0]-1 , idx[1]});
                checkedMap[idx[0]-1][idx[1]] = 1;
                count++;
            }

            if(map[idx[0]+1][idx[1]] == 1 && checkedMap[idx[0]+1][idx[1]] == 0){ //down
                q.offer(new int[]{ idx[0]+1 , idx[1]});
                checkedMap[idx[0]+1][idx[1]] = 1;
                count++;
            }

        }

        return count;
    }

}
